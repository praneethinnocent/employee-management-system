========================================================================
			Java Project
========================================================================
Project Title		:	Employee Management System 

Client			:	Codetru, Bridgesoft, Appollodart and etc.

Environments		:	Java8, Spring Boot, ReactJS 

Database		:	MySQL 

Tools			:	POSTMAN, GIT/GITHUB, MAVEN

IDE's			:	STS/Intellij , VSC editor. 
=========================================================================


Steps to develop Employee Management System project 
====================================================

Project Structure 
-----------------
springboot-backend
|
|---src/main/java
|	|
	|---com.ihub.www
		|
		|---SpringBootBackendApplication.java
	|
	|---com.ihub.www.controller	
		|
		|---EmployeeController.java

	|---com.ihub.www.service	
		|
		|---EmployeeService.java
	
	|---com.ihub.www.repo	
		|
		|---EmployeeRepository.java (interface)
	
	|---com.ihub.www.model
		|
		|---Employee.java
	
	|---com.ihub.www.exception	
		|
		|---ResourceNotFoundException.java

|---src/main/resources
|	|
	|---application.properties

|---src/test/java
|
|---pom.xml 

step1:
------
	Create a spring boot starter project i.e springboot-backend.
	ex:
		starters:	
				Spring Web 
				Spring Data JPA
				Lombok
				MySQL Driver 
				Springboot DevTools 

step2:
------
	Connect to MySQL database and create the schema later use it.
	
	ex:
		MYSQL> create schema employee_management_system;

		MYSQL> use employee_management_system;
	
step3:
------
	Create employees table with records.
	ex:
		MYSQL> create table employees(
					id  int(3) AUTO_INCREMENT,
					first_Name  varchar(10),
					last_Name   varchar(10),
					email      varchar(15),
					primary key(id)		
				);

		MYSQL> insert into employees values(1,'Alan','Morries','alan@gmail.com');
		MYSQL> insert into employees values(2,'Erick','Anderson','erick@zoho.com');
		MYSQL> commit;

step4:
-----
	Add server port number, MySQL properties and hibernate properties inside 
	application.properties file.

application.properties
-----------------------
spring.application.name=springboot-backend

server.port=9090

spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/employee_management_system
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update


step5:
------
	Create a Employee model class inside "com.ihub.www.model" package.

Employee.java
--------------
package com.ihub.www.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name="employees")
@Data
@AllArgsConstructor
@NoArgsConstructor
public class Employee 
{
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	
	@Column
	private String firstName;
	
	@Column
	private String lastName;
	
	@Column
	private String email;
}

step6:
------
	Create EmployeeRepository interface inside "com.ihub.www.repo" package.

EmployeeRepository.java
-----------------------
package com.ihub.www.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.ihub.www.model.Employee;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long>
{

}

step7:
-----
	Create EmployeeService class inside "com.ihub.www.service" package.

EmployeeService.java
---------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository employeeRepository;
	
	
	public List<Employee> getAllEmployees()
	{
		return employeeRepository.findAll();
	}
}

step8:
----
	Create a EmployeeController class inside "com.ihub.www.controller" package.

EmployeeController.java
-------------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService;
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
}

step9:
-----
	Run the spring boot starter project.

step10:
--------
	Open the POSTMAN and test the below Rest API.
	ex:
		Method 		Request url
		-------		-----------
		GET		http://localhost:9090/api/v1/employees













		
