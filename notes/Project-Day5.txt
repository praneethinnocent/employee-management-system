
step44:
------
	Add delete rest api in spring boot.

EmployeeController.java
----------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1/")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService;
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
	
	@PostMapping("/employees")
	public Employee createEmployee(@RequestBody Employee employee)
	{
		return employeeService.createEmployee(employee);
	}
	
	@GetMapping("/employees/{id}")
	public Employee getEmployeeById(@PathVariable long id)
	{
		return employeeService.getEmployeeById(id);
	}
	
	@PutMapping("/employees/{id}")
	public ResponseEntity<Employee> updateEmployee(@PathVariable long id,@RequestBody Employee employee)
	{
		return employeeService.updateEmployee(id,employee);
	}
	
	@DeleteMapping("/employees/{id}")
	public ResponseEntity<HttpStatus> deleteEmployee(@PathVariable long id)
	{
		return employeeService.deleteEmployee(id);
	}
	
}



EmployeeService.java
--------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;

import com.ihub.www.exception.ResourceNotFoundException;
import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository employeeRepository;
	
	
	public List<Employee> getAllEmployees()
	{
		return employeeRepository.findAll();
	}
	
	public Employee createEmployee(Employee employee)
	{
		return employeeRepository.save(employee);
	}
	
	public Employee getEmployeeById(long id)
	{
		return employeeRepository.findById(id).orElseThrow(()->new ResourceNotFoundException("Id Not Found"));
	}
	
	public ResponseEntity<Employee> updateEmployee(long id,Employee employee)
	{
		Employee oldEmp=employeeRepository.findById(id).orElseThrow(()->new ResourceNotFoundException("Id Not Found"));
		oldEmp.setFirstName(employee.getFirstName());
		oldEmp.setLastName(employee.getLastName());
		oldEmp.setEmail(employee.getEmail());
		
		employeeRepository.save(oldEmp);
		
		return ResponseEntity.ok(oldEmp);
	}
	
	
	public ResponseEntity<HttpStatus> deleteEmployee(long id)
	{
		Employee employee=employeeRepository.findById(id).orElseThrow(()-> new ResourceNotFoundException(("Id Not Found")));
		employeeRepository.delete(employee);
		return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}
}



step45:
------
	Add delete method inside "EmployeeService.js" file.

EmployeeService.js
--------------------
import axios from 'axios';

const EMPLOYEE_BASE_API="http://localhost:9090/api/v1/employees";

class EmployeeService
{
    getEmployees()
    {
        return axios.get(EMPLOYEE_BASE_API);
    }

    createEmployee(employee)
    {
        return axios.post(EMPLOYEE_BASE_API,employee);
    }

    getEmployeeById(employeeId)
    {
        return axios.get(EMPLOYEE_BASE_API+'/'+employeeId);
    }

    updateEmployee(employeeId,employee)
    {
         return axios.put(EMPLOYEE_BASE_API+'/'+employeeId,employee);   
    }

    deleteEmployee(employeeId)
    {
        return axios.delete(EMPLOYEE_BASE_API+'/'+employeeId);
    }
}
export default new EmployeeService();




step46:
-------
	Add delete button logic inside "EmployeeListComponent.js" file

EmployeeListComponent.js
------------------------
import {Component} from 'react';
import EmployeeService from '../service/EmployeeService';
import { Link } from 'react-router-dom';

class EmployeeListComponent extends Component
{
    constructor()
    {
        super();

        this.state={
            employees:[]
        }
    }

    componentDidMount()
    {
        EmployeeService.getEmployees().then(res=>{
            this.setState({employees:res.data});
        })
    }

    deleteEmployee=(employeeId)=>{
        EmployeeService.deleteEmployee(employeeId).then(res=>{
            EmployeeService.getEmployees().then(res=>{
                this.setState({employees:res.data})
            })
        })
        .catch(error=>
            {
                console.log(error);
            })
    
    }

    render()
    {
        return (
             <div className='container mt-5'>
                <h3 className='text-center'>Employee List</h3>

                <div className='row mt-5'>

        <Link to="/add-employee" className='btn btn-primary'> Add Employee </Link>            
                    <table className='table table-bordered table-striped'>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>FIRSTNAME</th>
                                <th>LASTNAME</th>
                                <th>EMAIL</th>
                                <th>ACTIONS</th>
                            </tr>
                        </thead>
                        <tbody>
                            {
                                this.state.employees.map(employee=>{
                                    return <tr key={employee.id}>
                                                <td>{employee.id}</td>
                                                <td>{employee.firstName}</td>
                                                <td>{employee.lastName}</td>
                                                <td>{employee.email}</td>
                                                <td>
    <Link to={`/update-employee/${employee.id}`} className='btn btn-info'> update </Link>      
    <button className='btn btn-danger' style={{marginLeft:"10px"}}
    onClick={()=> this.deleteEmployee(employee.id)}> delete </button>                                          
                                                </td>
                                            </tr>
                                })
                            }
                        </tbody>
                    </table>
                </div>
             </div>   
        )
    }
}
export default EmployeeListComponent;


How to push the code to github
==============================
step1:
------
	Create a remote repository.
	ex:
		https://github.com/NiyazulHasan/java-project40

step2:
------
	Create a folder on a desktop and add the project files.

step3:
------
	Open the git bash from same folder.

step4:
-----
	initialized empty git repository.
	ex:
		git init 

step5:
------
	Switch master branch to main branch.
	ex:
		git branch --move master main 
	

step6:
------
	Add the files to staging area.
	ex:
		git add . 

step7:
-----
	Commit the changes.
	ex:
		git commit -m "Project Notes"

step8:
------
	Add remote repository.
	ex:
		git remote add origin https://github.com/NiyazulHasan/java-project40

step9:
------
	Push the code.
	ex:
		git push -f origin main 






















